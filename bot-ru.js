require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Matrix Synapse
const MATRIX_URL = process.env.MATRIX_URL;
const MATRIX_ADMIN_TOKEN = process.env.MATRIX_ADMIN_TOKEN;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const AUTHORIZED_USERS = process.env.AUTHORIZED_USERS
  ? process.env.AUTHORIZED_USERS.split(",").map((id) => parseInt(id.trim()))
  : [];
const AUTHORIZED_USERNAMES = process.env.AUTHORIZED_USERNAMES
  ? process.env.AUTHORIZED_USERNAMES.split(",").map((username) =>
      username.trim().toLowerCase()
    )
  : [];

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const userStates = new Map();

// –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function isAuthorized(user) {
  // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –≤–µ—Å—å –¥–æ—Å—Ç—É–ø –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  if (AUTHORIZED_USERS.length === 0 && AUTHORIZED_USERNAMES.length === 0) {
    console.error(
      "‚ö†Ô∏è  –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏! –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
    );
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (AUTHORIZED_USERS.includes(user.id)) {
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
  if (
    user.username &&
    AUTHORIZED_USERNAMES.includes(user.username.toLowerCase())
  ) {
    return true;
  }

  return false;
}

function logUnauthorizedAccess(user, command) {
  const userInfo = `${user.first_name || ""} ${user.last_name || ""}`.trim();
  const username = user.username
    ? `@${user.username}`
    : "–Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è";
  console.warn(`üö´ –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:`);
  console.warn(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userInfo} (${username})`);
  console.warn(`   ID: ${user.id}`);
  console.warn(`   –ö–æ–º–∞–Ω–¥–∞: ${command}`);
  console.warn(`   –í—Ä–µ–º—è: ${new Date().toISOString()}`);
}

function sendUnauthorizedMessage(chatId) {
  const message = `üö´ *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω*\n\n–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n\n–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
  bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
}

function logAuthorizedAccess(user, command) {
  const userInfo = `${user.first_name || ""} ${user.last_name || ""}`.trim();
  const username = user.username
    ? `@${user.username}`
    : "–Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è";
  console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø:`);
  console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userInfo} (${username})`);
  console.log(`   ID: ${user.id}`);
  console.log(`   –ö–æ–º–∞–Ω–¥–∞: ${command}`);
  console.log(`   –í—Ä–µ–º—è: ${new Date().toISOString()}`);
}

// Middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function requireAuth(handler) {
  return (msg, match) => {
    const user = msg.from;
    const command = msg.text || "callback";

    if (!isAuthorized(user)) {
      logUnauthorizedAccess(user, command);
      sendUnauthorizedMessage(msg.chat.id);
      return;
    }

    logAuthorizedAccess(user, command);
    handler(msg, match);
  };
}

function requireAuthCallback(handler) {
  return (callbackQuery) => {
    const user = callbackQuery.from;
    const command = `callback: ${callbackQuery.data}`;

    if (!isAuthorized(user)) {
      logUnauthorizedAccess(user, command);
      sendUnauthorizedMessage(callbackQuery.message.chat.id);
      bot.answerCallbackQuery(callbackQuery.id, { text: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
      return;
    }

    logAuthorizedAccess(user, command);
    handler(callbackQuery);
  };
}

// –ö–ª–∏–µ–Ω—Ç Matrix API
class MatrixClient {
  constructor(baseUrl, adminToken) {
    this.baseUrl = baseUrl;
    this.adminToken = adminToken;
    this.headers = {
      Authorization: `Bearer ${adminToken}`,
      "Content-Type": "application/json",
    };
  }

  async getUsers(from = 0, limit = 100) {
    try {
      const response = await axios.get(
        `${this.baseUrl}/_synapse/admin/v2/users`,
        {
          headers: this.headers,
          params: { from, limit },
        }
      );
      return response.data;
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        error.response?.data || error.message
      );
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${
          error.response?.data?.error || error.message
        }`
      );
    }
  }

  async deactivateUser(userId) {
    try {
      const response = await axios.post(
        `${this.baseUrl}/_synapse/admin/v1/deactivate/${encodeURIComponent(
          userId
        )}`,
        { erase: false },
        { headers: this.headers }
      );
      return response.data;
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        error.response?.data || error.message
      );
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${
          error.response?.data?.error || error.message
        }`
      );
    }
  }

  async searchUsers(searchTerm, from = 0, limit = 100) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (Matrix –Ω–µ –∏–º–µ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞)
      const response = await axios.get(
        `${this.baseUrl}/_synapse/admin/v2/users`,
        {
          headers: this.headers,
          params: { from: 0, limit: 1000 }, // –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        }
      );

      const allUsers = response.data.users || [];
      const searchLower = searchTerm.toLowerCase();

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      const filteredUsers = allUsers.filter((user) => {
        return (
          user.name.toLowerCase().includes(searchLower) ||
          (user.displayname &&
            user.displayname.toLowerCase().includes(searchLower)) ||
          user.name === searchTerm // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        );
      });

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
      const startIndex = from;
      const endIndex = Math.min(startIndex + limit, filteredUsers.length);
      const paginatedUsers = filteredUsers.slice(startIndex, endIndex);

      return {
        users: paginatedUsers,
        total: filteredUsers.length,
        from: from,
        limit: limit,
      };
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        error.response?.data || error.message
      );
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${
          error.response?.data?.error || error.message
        }`
      );
    }
  }

  async getUserInfo(userId) {
    try {
      const response = await axios.get(
        `${this.baseUrl}/_synapse/admin/v2/users/${encodeURIComponent(userId)}`,
        { headers: this.headers }
      );
      return response.data;
    } catch (error) {
      console.error(
        "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:",
        error.response?.data || error.message
      );
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${
          error.response?.data?.error || error.message
        }`
      );
    }
  }
}

const matrixClient = new MatrixClient(MATRIX_URL, MATRIX_ADMIN_TOKEN);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function createMainKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data: "get_users" }],
        [{ text: "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data: "search_users" }],
        [
          {
            text: "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            callback_data: "deactivate_menu",
          },
        ],
        [{ text: "üîí –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data: "show_my_info" }],
      ],
    },
  };
}

function createUserSelectionKeyboard(
  users,
  page = 0,
  usersPerPage = 10,
  actionPrefix = "deactivate"
) {
  const startIndex = page * usersPerPage;
  const endIndex = Math.min(startIndex + usersPerPage, users.length);
  const pageUsers = users.slice(startIndex, endIndex);

  const keyboard = [];

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  pageUsers.forEach((user) => {
    const status = user.deactivated ? "‚ùå" : "‚úÖ";
    const userType = user.admin
      ? " üëë"
      : user.user_type
      ? ` (${user.user_type})`
      : "";
    keyboard.push([
      {
        text: `${status} ${user.displayname || user.name}${userType}`,
        callback_data: `${actionPrefix}_${user.name}`,
      },
    ]);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const navRow = [];
  if (page > 0) {
    navRow.push({
      text: "‚óÄÔ∏è –ù–∞–∑–∞–¥",
      callback_data: `${actionPrefix}_page_${page - 1}`,
    });
  }
  if (endIndex < users.length) {
    navRow.push({
      text: "–î–∞–ª–µ–µ ‚ñ∂Ô∏è",
      callback_data: `${actionPrefix}_page_${page + 1}`,
    });
  }
  if (navRow.length > 0) {
    keyboard.push(navRow);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
  keyboard.push([{ text: "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_menu" }]);

  return { reply_markup: { inline_keyboard: keyboard } };
}

function createSearchResultKeyboard(
  users,
  searchTerm,
  page = 0,
  usersPerPage = 10
) {
  const startIndex = page * usersPerPage;
  const endIndex = Math.min(startIndex + usersPerPage, users.length);
  const pageUsers = users.slice(startIndex, endIndex);

  const keyboard = [];

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –æ–ø—Ü–∏—è–º–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  pageUsers.forEach((user) => {
    const status = user.deactivated ? "‚ùå" : "‚úÖ";
    const userType = user.admin
      ? " üëë"
      : user.user_type
      ? ` (${user.user_type})`
      : "";

    let actionButton;
    if (user.deactivated) {
      actionButton = { text: "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", callback_data: "noop" };
    } else if (user.admin) {
      actionButton = { text: "üëë –ê–¥–º–∏–Ω –∑–∞—â–∏—â–µ–Ω", callback_data: "noop" };
    } else {
      actionButton = {
        text: "üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
        callback_data: `deactivate_${user.name}`,
      };
    }
    keyboard.push([
      {
        text: `${status} ${user.displayname} ${user.name}${userType}`,
        callback_data: `userinfo_${user.name}`,
      },
      actionButton,
    ]);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const navRow = [];
  if (page > 0) {
    navRow.push({ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: `search_page_${page - 1}` });
  }
  if (endIndex < users.length) {
    navRow.push({ text: "–î–∞–ª–µ–µ ‚ñ∂Ô∏è", callback_data: `search_page_${page + 1}` });
  }
  if (navRow.length > 0) {
    keyboard.push(navRow);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
  keyboard.push([
    { text: "üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data: "search_users" },
    { text: "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_menu" },
  ]);

  return { reply_markup: { inline_keyboard: keyboard } };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
bot.onText(
  /\/start/,
  requireAuth((msg) => {
    const chatId = msg.chat.id;
    const user = msg.from;
    const userInfo = `${user.first_name || ""} ${user.last_name || ""}`.trim();

    const welcomeMessage = `
ü§ñ *–ë–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è Matrix Synapse*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userInfo}!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–º Matrix Synapse.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ—Ä–≤–µ—Ä–∞
‚Ä¢ –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    `;

    bot.sendMessage(chatId, welcomeMessage, {
      parse_mode: "Markdown",
      ...createMainKeyboard(),
    });
  })
);

bot.onText(
  /\/help/,
  requireAuth((msg) => {
    const chatId = msg.chat.id;
    const helpMessage = `
üìñ *–°–ø—Ä–∞–≤–∫–∞ - –ë–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è Matrix Synapse*

*–ö–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /start - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ /menu - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /whoami - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å
‚Ä¢ /search <–∑–∞–ø—Ä–æ—Å> - –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

*–§—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≤–∞—à–µ–º Matrix —Å–µ—Ä–≤–µ—Ä–µ
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É –∏–º–µ–Ω–∏ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞

*–°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É:*
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏: "–∏–≤–∞–Ω"
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É –∏–º–µ–Ω–∏: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "@user:example.com"
‚Ä¢ –ü–æ–∏—Å–∫ –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É

*–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*
‚Ä¢ –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –±–æ—Ç—É
‚Ä¢ –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏

*–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å —Ç–æ–∫–µ–Ω–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Matrix
‚Ä¢ –£ –≤–∞—Å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Matrix
‚Ä¢ –í–∞—à Telegram ID –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
    `;

    bot.sendMessage(chatId, helpMessage, { parse_mode: "Markdown" });
  })
);

bot.onText(
  /\/menu/,
  requireAuth((msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", createMainKeyboard());
  })
);

bot.onText(
  /\/whoami/,
  requireAuth((msg) => {
    const chatId = msg.chat.id;
    const user = msg.from;
    const userInfo = `${user.first_name || ""} ${user.last_name || ""}`.trim();
    const username = user.username
      ? `@${user.username}`
      : "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è";

    const message = `
üîí *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏*

*–ò–º—è:* ${userInfo}
*–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* ${username}
*ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* \`${user.id}\`
*–Ø–∑—ã–∫:* ${user.language_code || "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}

‚úÖ *–°—Ç–∞—Ç—É—Å:* –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
üîê *–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:* –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Matrix

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –í–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.
    `;

    bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
  })
);

// –ö–æ–º–∞–Ω–¥–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
bot.onText(
  /\/search (.+)/,
  requireAuth(async (msg, match) => {
    const chatId = msg.chat.id;
    const searchTerm = match[1].trim();

    const searchingMessage = await bot.sendMessage(
      chatId,
      `üîç –ü–æ–∏—Å–∫: "${searchTerm}"...`
    );

    try {
      const searchResults = await matrixClient.searchUsers(searchTerm);
      const users = searchResults.users || [];

      if (users.length === 0) {
        await bot.editMessageText(
          `üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}", –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.`,
          {
            chat_id: chatId,
            message_id: searchingMessage.message_id,
            parse_mode: "Markdown",
            reply_markup: {
              inline_keyboard: [
                [{ text: "üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data: "search_users" }],
                [{ text: "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_menu" }],
              ],
            },
          }
        );
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userStates.set(chatId, {
        search_results: users,
        search_term: searchTerm,
        search_page: 0,
      });

      const resultMessage = `üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*\n\n–ù–∞–π–¥–µ–Ω–æ ${searchResults.total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${searchTerm}"\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:`;

      await bot.editMessageText(resultMessage, {
        chat_id: chatId,
        message_id: searchingMessage.message_id,
        parse_mode: "Markdown",
        ...createSearchResultKeyboard(users, searchTerm, 0),
      });
    } catch (error) {
      await bot.editMessageText(
        `‚ùå *–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞*\n\n–û—à–∏–±–∫–∞: ${error.message}`,
        {
          chat_id: chatId,
          message_id: searchingMessage.message_id,
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_menu" }],
            ],
          },
        }
      );
    }
  })
);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–∞
bot.on(
  "message",
  requireAuth(async (msg) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
    if (!msg.text || msg.text.startsWith("/")) {
      return;
    }

    const chatId = msg.chat.id;
    const userState = userStates.get(chatId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–∞
    if (userState && userState.waiting_for_search) {
      const searchTerm = msg.text.trim();

      if (!searchTerm) {
        bot.sendMessage(
          chatId,
          "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."
        );
        return;
      }

      const searchingMessage = await bot.sendMessage(
        chatId,
        `üîç –ü–æ–∏—Å–∫: "${searchTerm}"...`
      );

      try {
        const searchResults = await matrixClient.searchUsers(searchTerm);
        const users = searchResults.users || [];

        if (users.length === 0) {
          await bot.editMessageText(
            `üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}", –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.`,
            {
              chat_id: chatId,
              message_id: searchingMessage.message_id,
              parse_mode: "Markdown",
              reply_markup: {
                inline_keyboard: [
                  [{ text: "üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data: "search_users" }],
                  [
                    {
                      text: "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                      callback_data: "back_to_menu",
                    },
                  ],
                ],
              },
            }
          );

          // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
          userStates.delete(chatId);
          return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        userStates.set(chatId, {
          search_results: users,
          search_term: searchTerm,
          search_page: 0,
        });

        const resultMessage = `üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*\n\n–ù–∞–π–¥–µ–Ω–æ ${searchResults.total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${searchTerm}"\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:`;

        await bot.editMessageText(resultMessage, {
          chat_id: chatId,
          message_id: searchingMessage.message_id,
          parse_mode: "Markdown",
          ...createSearchResultKeyboard(users, searchTerm, 0),
        });
      } catch (error) {
        await bot.editMessageText(
          `‚ùå *–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞*\n\n–û—à–∏–±–∫–∞: ${error.message}`,
          {
            chat_id: chatId,
            message_id: searchingMessage.message_id,
            parse_mode: "Markdown",
            reply_markup: {
              inline_keyboard: [
                [{ text: "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_menu" }],
              ],
            },
          }
        );

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        userStates.delete(chatId);
      }
    }
  })
);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
bot.on(
  "callback_query",
  requireAuthCallback(async (callbackQuery) => {
    const message = callbackQuery.message;
    const data = callbackQuery.data;
    const chatId = message.chat.id;
    const messageId = message.message_id;
    const user = callbackQuery.from;

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∑–∞–ø—Ä–æ—Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Ç–∞–π–º–∞—É—Ç
    try {
      await bot.answerCallbackQuery(callbackQuery.id);
    } catch (answerError) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback –∑–∞–ø—Ä–æ—Å:", answerError.message);
    }

    try {
      if (data === "show_my_info") {
        const userInfo = `${user.first_name || ""} ${
          user.last_name || ""
        }`.trim();
        const username = user.username
          ? `@${user.username}`
          : "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è";

        const infoMessage = `
üîí *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏*

*–ò–º—è:* ${userInfo}
*–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* ${username}
*ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* \`${user.id}\`

‚úÖ *–°—Ç–∞—Ç—É—Å:* –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
üîê *–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:* –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Matrix
            `;

        await bot.editMessageText(infoMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_menu" }],
            ],
          },
        });
      } else if (data === "search_users") {
        await bot.editMessageText(
          "üîç *–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∏–º—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: "Markdown",
            reply_markup: {
              inline_keyboard: [
                [{ text: "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_menu" }],
              ],
            },
          }
        );

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–∞
        userStates.set(chatId, { waiting_for_search: true });
      } else if (data.startsWith("search_page_")) {
        const page = parseInt(data.split("_")[2]);
        const state = userStates.get(chatId);

        if (state && state.search_results) {
          state.search_page = page;
          userStates.set(chatId, state);

          await bot.editMessageReplyMarkup(
            createSearchResultKeyboard(
              state.search_results,
              state.search_term,
              page
            ).reply_markup,
            { chat_id: chatId, message_id: messageId }
          );
        }
      } else if (data.startsWith("userinfo_")) {
        const userId = data.substring("userinfo_".length);

        try {
          const userInfo = await matrixClient.getUserInfo(userId);

          const infoMessage = `
üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*

*ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* \`${userInfo.name}\`
*–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è:* ${userInfo.displayname || "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"}
*–°—Ç–∞—Ç—É—Å:* ${userInfo.deactivated ? "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"}
*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* ${userInfo.admin ? "üëë –î–∞" : "‚ùå –ù–µ—Ç"}
*–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* ${userInfo.user_type || "–æ–±—ã—á–Ω—ã–π"}
*–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:* ${new Date(userInfo.creation_ts * 1000).toLocaleString(
            "ru-RU"
          )}
*–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:* ${
            userInfo.last_seen_ts
              ? new Date(userInfo.last_seen_ts).toLocaleString("ru-RU")
              : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
          }
                `;

          const buttons = [];
          if (userInfo.deactivated) {
            buttons.push([
              {
                text: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
                callback_data: "noop",
              },
            ]);
          } else if (userInfo.admin) {
            buttons.push([
              {
                text: "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—â–∏—â–µ–Ω –æ—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏",
                callback_data: "noop",
              },
            ]);
          } else {
            buttons.push([
              {
                text: "üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                callback_data: `deactivate_${userId}`,
              },
            ]);
          }

          buttons.push([
            { text: "üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data: "back_to_search" },
          ]);
          buttons.push([
            { text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_menu" },
          ]);

          await bot.editMessageText(infoMessage, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: "Markdown",
            reply_markup: {
              inline_keyboard: buttons,
            },
          });
        } catch (error) {
          await bot.editMessageText(
            `‚ùå *–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n–û—à–∏–±–∫–∞: ${error.message}`,
            {
              chat_id: chatId,
              message_id: messageId,
              parse_mode: "Markdown",
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                      callback_data: "back_to_menu",
                    },
                  ],
                ],
              },
            }
          );
        }
      } else if (data === "back_to_search") {
        const state = userStates.get(chatId);
        if (state && state.search_results) {
          const resultMessage = `üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*\n\n–ù–∞–π–¥–µ–Ω–æ ${state.search_results.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${state.search_term}"\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:`;

          await bot.editMessageText(resultMessage, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: "Markdown",
            ...createSearchResultKeyboard(
              state.search_results,
              state.search_term,
              state.search_page || 0
            ),
          });
        } else {
          await bot.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
            chat_id: chatId,
            message_id: messageId,
            ...createMainKeyboard(),
          });
        }
      } else if (data === "get_users") {
        await bot.editMessageText(
          "üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞ Matrix...",
          {
            chat_id: chatId,
            message_id: messageId,
          }
        );

        const usersData = await matrixClient.getUsers();
        const users = usersData.users || [];

        if (users.length === 0) {
          await bot.editMessageText("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_menu" }],
              ],
            },
          });
          return;
        }

        let usersList = `üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Matrix* (–≤—Å–µ–≥–æ ${users.length})\n\n`;
        users.forEach((user, index) => {
          const status = user.deactivated ? "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω";
          const userType = user.admin
            ? " (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"
            : user.user_type
            ? ` (${user.user_type})`
            : "";
          usersList += `${index + 1}. ${
            user.displayname || user.name
          }${userType}\n`;
          usersList += `   ‚îî ${user.name} - ${status}\n\n`;
        });

        // –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if (usersList.length > 1000) {
          usersList = usersList.substring(0, 980) + "...\n\n_–°–ø–∏—Å–æ–∫ —Å–æ–∫—Ä–∞—â–µ–Ω_";
        }

        await bot.editMessageText(usersList, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [{ text: "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_menu" }],
            ],
          },
        });
      } else if (data === "deactivate_menu") {
        await bot.editMessageText(
          "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏...",
          {
            chat_id: chatId,
            message_id: messageId,
          }
        );

        const usersData = await matrixClient.getUsers();
        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ò –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const deactivatableUsers = (usersData.users || []).filter(
          (user) => !user.deactivated && !user.admin
        );

        if (deactivatableUsers.length === 0) {
          const totalActive = (usersData.users || []).filter(
            (user) => !user.deactivated
          ).length;
          const adminCount = (usersData.users || []).filter(
            (user) => !user.deactivated && user.admin
          ).length;

          let message = "‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.";
          if (adminCount > 0) {
            message += `\n\nüëë –ù–∞–π–¥–µ–Ω–æ ${adminCount} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä(–æ–≤), –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.`;
          }

          await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_menu" }],
              ],
            },
          });
          return;
        }

        userStates.set(chatId, { users: deactivatableUsers, page: 0 });

        await bot.editMessageText(
          "‚ùå *–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:*\n\n‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∑–∞—â–∏—â–µ–Ω—ã –∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ.",
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: "Markdown",
            ...createUserSelectionKeyboard(deactivatableUsers, 0),
          }
        );
      } else if (data.startsWith("deactivate_page_")) {
        const page = parseInt(data.split("_")[2]);
        const state = userStates.get(chatId);

        if (state && state.users) {
          state.page = page;
          userStates.set(chatId, state);

          await bot.editMessageReplyMarkup(
            createUserSelectionKeyboard(state.users, page).reply_markup,
            { chat_id: chatId, message_id: messageId }
          );
        }
      } else if (data.startsWith("deactivate_")) {
        const userId = data.substring("deactivate_".length);

        await bot.editMessageText(
          `‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏*\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\`${userId}\`\n\n‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`,
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: "Markdown",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚úÖ –î–∞, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data: `confirm_deactivate_${userId}`,
                  },
                  { text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "deactivate_menu" },
                ],
              ],
            },
          }
        );
      } else if (data.startsWith("confirm_deactivate_")) {
        const userId = data.substring("confirm_deactivate_".length);

        await bot.editMessageText(`üîÑ –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`, {
          chat_id: chatId,
          message_id: messageId,
        });

        try {
          await matrixClient.deactivateUser(userId);

          // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é
          const userInfo = `${user.first_name || ""} ${
            user.last_name || ""
          }`.trim();
          const username = user.username
            ? `@${user.username}`
            : "–Ω–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è";
          console.log(
            `üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:`
          );
          console.log(`   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${userInfo} (${username})`);
          console.log(`   ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${user.id}`);
          console.log(`   –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ${userId}`);
          console.log(`   –í—Ä–µ–º—è: ${new Date().toISOString()}`);

          await bot.editMessageText(
            `‚úÖ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \`${userId}\` –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.`,
            {
              chat_id: chatId,
              message_id: messageId,
              parse_mode: "Markdown",
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ",
                      callback_data: "deactivate_menu",
                    },
                  ],
                  [
                    {
                      text: "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                      callback_data: "back_to_menu",
                    },
                  ],
                ],
              },
            }
          );
        } catch (error) {
          await bot.editMessageText(
            `‚ùå *–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏*\n\n–û—à–∏–±–∫–∞: ${error.message}`,
            {
              chat_id: chatId,
              message_id: messageId,
              parse_mode: "Markdown",
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                      callback_data: "deactivate_menu",
                    },
                  ],
                  [
                    {
                      text: "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                      callback_data: "back_to_menu",
                    },
                  ],
                ],
              },
            }
          );
        }
      } else if (data === "back_to_menu") {
        userStates.delete(chatId);
        await bot.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
          chat_id: chatId,
          message_id: messageId,
          ...createMainKeyboard(),
        });
      } else if (data === "noop") {
        // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        return;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ callback –∑–∞–ø—Ä–æ—Å–∞:", error);
      await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_menu" }],
          ],
        },
      });
    }
  })
);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on("error", (error) => {
  console.error("–û—à–∏–±–∫–∞ –±–æ—Ç–∞:", error);
});

// –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
console.log(
  "ü§ñ –ë–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è Matrix Synapse (–†—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è) –∑–∞–ø—É—â–µ–Ω..."
);
console.log("üîí –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:");
console.log(
  `   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${
    AUTHORIZED_USERS.length > 0 ? AUTHORIZED_USERS.join(", ") : "–ù–µ—Ç"
  }`
);
console.log(
  `   –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${
    AUTHORIZED_USERNAMES.length > 0 ? AUTHORIZED_USERNAMES.join(", ") : "–ù–µ—Ç"
  }`
);

if (AUTHORIZED_USERS.length === 0 && AUTHORIZED_USERNAMES.length === 0) {
  console.error(
    "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏! –ë–æ—Ç –∑–∞–ø—Ä–µ—Ç–∏—Ç –≤–µ—Å—å –¥–æ—Å—Ç—É–ø."
  );
  console.error(
    "   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ AUTHORIZED_USERS –∏–ª–∏ AUTHORIZED_USERNAMES –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ .env"
  );
}

process.on("SIGINT", () => {
  console.log("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...");
  bot.stopPolling();
  process.exit(0);
});
